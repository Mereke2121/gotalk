// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
	models "github.com/gotalk/models"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockAuthorization) AddUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockAuthorizationMockRecorder) AddUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockAuthorization)(nil).AddUser), user)
}

// Authenticate mocks base method.
func (m *MockAuthorization) Authenticate(user *models.Authentication) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthorizationMockRecorder) Authenticate(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthorization)(nil).Authenticate), user)
}

// GetUserById mocks base method.
func (m *MockAuthorization) GetUserById(userId string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", userId)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockAuthorizationMockRecorder) GetUserById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockAuthorization)(nil).GetUserById), userId)
}

// MockRoom is a mock of Room interface.
type MockRoom struct {
	ctrl     *gomock.Controller
	recorder *MockRoomMockRecorder
}

// MockRoomMockRecorder is the mock recorder for MockRoom.
type MockRoomMockRecorder struct {
	mock *MockRoom
}

// NewMockRoom creates a new mock instance.
func NewMockRoom(ctrl *gomock.Controller) *MockRoom {
	mock := &MockRoom{ctrl: ctrl}
	mock.recorder = &MockRoomMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoom) EXPECT() *MockRoomMockRecorder {
	return m.recorder
}

// AuthenticateInRoom mocks base method.
func (m *MockRoom) AuthenticateInRoom(input *models.JoinRoomInput, roomId int, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateInRoom", input, roomId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthenticateInRoom indicates an expected call of AuthenticateInRoom.
func (mr *MockRoomMockRecorder) AuthenticateInRoom(input, roomId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateInRoom", reflect.TypeOf((*MockRoom)(nil).AuthenticateInRoom), input, roomId, userId)
}

// CreateRoom mocks base method.
func (m *MockRoom) CreateRoom(input *models.Room) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockRoomMockRecorder) CreateRoom(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRoom)(nil).CreateRoom), input)
}

// DeleteRoomById mocks base method.
func (m *MockRoom) DeleteRoomById(roomId int, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoomById", roomId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoomById indicates an expected call of DeleteRoomById.
func (mr *MockRoomMockRecorder) DeleteRoomById(roomId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoomById", reflect.TypeOf((*MockRoom)(nil).DeleteRoomById), roomId, userId)
}

// GetAllRooms mocks base method.
func (m *MockRoom) GetAllRooms() ([]*models.RoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRooms")
	ret0, _ := ret[0].([]*models.RoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRooms indicates an expected call of GetAllRooms.
func (mr *MockRoomMockRecorder) GetAllRooms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRooms", reflect.TypeOf((*MockRoom)(nil).GetAllRooms))
}

// GetRoomById mocks base method.
func (m *MockRoom) GetRoomById(roomId int) (*models.RoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomById", roomId)
	ret0, _ := ret[0].(*models.RoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomById indicates an expected call of GetRoomById.
func (mr *MockRoomMockRecorder) GetRoomById(roomId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomById", reflect.TypeOf((*MockRoom)(nil).GetRoomById), roomId)
}

// UpdateRoom mocks base method.
func (m *MockRoom) UpdateRoom(input *models.UpdateRoomInput, roomId int, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoom", input, roomId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoom indicates an expected call of UpdateRoom.
func (mr *MockRoomMockRecorder) UpdateRoom(input, roomId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockRoom)(nil).UpdateRoom), input, roomId, userId)
}

// MockWebsocket is a mock of Websocket interface.
type MockWebsocket struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketMockRecorder
}

// MockWebsocketMockRecorder is the mock recorder for MockWebsocket.
type MockWebsocketMockRecorder struct {
	mock *MockWebsocket
}

// NewMockWebsocket creates a new mock instance.
func NewMockWebsocket(ctrl *gomock.Controller) *MockWebsocket {
	mock := &MockWebsocket{ctrl: ctrl}
	mock.recorder = &MockWebsocketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocket) EXPECT() *MockWebsocketMockRecorder {
	return m.recorder
}

// MakeWSConnection mocks base method.
func (m *MockWebsocket) MakeWSConnection(conn *websocket.Conn, roomId int, email string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MakeWSConnection", conn, roomId, email)
}

// MakeWSConnection indicates an expected call of MakeWSConnection.
func (mr *MockWebsocketMockRecorder) MakeWSConnection(conn, roomId, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeWSConnection", reflect.TypeOf((*MockWebsocket)(nil).MakeWSConnection), conn, roomId, email)
}
